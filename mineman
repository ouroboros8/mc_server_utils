#!/bin/bash
#
# Start, stop, pack, unpack and bootstrap minecraft servers
#

serversdir="/home/minecraft/"
ellipsis=100
cd $serversdir


function err {
  >&2 echo "$@"
}


function usage {
  err "Usage: mineman start|stop|store|unstore|bootstrap"
  exit 1
}


function startup_done {
  pane=$(tmux capture-pane -p -t $name)
  if [ $? != 0 ]; then
    err "Problem capturing output from tmux server. The server may have crashed or shutdown prematurely."
    exit 1
  fi
  echo "$pane" | sed '/^$/d' | tail -n 1 |
    egrep '^\[[0-9\:]*\] \[Server thread/INFO\]: Done \([0-9\.]*s\)\! For help, type "help" or "\?"' > /dev/null
}


function quickrun {
  
  function usage {
    err "Usage: mineman quickrun [-s]

Optional flags:

    -s              supress messages"
  }

  while [ $# -ge 1 ]
  do
    case $1 in
      -s)
        silent=true
        ;;
      *)
        usage
        ;;
    esac
    shift
  done

  name="${name}-quickrun"
  [ -z $silent ] && echo -n "Running server"
  tmux new-session -d -s $name
  tmux send-keys -t $name "./runserver; exit" Enter

  i=0
  while ! startup_done; do
    if [ $i == $ellipsis ]; then
      i=0
      [ -z $silent ] && echo -n '.'
    else
      let "i=$i+1"
    fi
  done
  unset i
  [ -z $silent ] && echo '.'
  [ -z $silent ] && echo 'Done.'

  [ -z $silent ] && echo 'Stopping server'
  tmux send-keys -t $name "stop" Enter
  i=0
  while tmux list-sessions | grep "^$name:" 2>&1 >/dev/null; do
    if [ $i == $ellipsis ]; then
      i=0
      [ -z $silent ] && echo -n '.'
    else
      let "i=$i+1"
    fi 
  done
  [ -z $silent ] && echo '.'
  [ -z $silent ] && echo 'Done.'
}


#function regen {
  #function usage {
    #err "Usage: mineman regen [-y]

#Optional flags:
    #-y              bypass \"Are you sure?\" message"
  #}
#}

function start {

  function usage {
    err "Usage: mineman start name -p
    
Optional flags:

    -p              allow tmux session to persist after the server shuts down."
    exit 1
  }

  name=$1
  if [ -z $name ]
  then
    usage
  fi

  shift
  while [ $# -ge 1 ]; do
    case $1 in
      -p)
        persist=true
        ;;
      *)
        usage
        ;;
    esac
    shift
  done

  ramdir=/dev/shm/$name/
  minedir=$serversdir/$name/
  diskdir=$minedir/diskcopy/
   
  if [ ! -d $minedir ]
  then
    err "Couldn't find $minedir. Wrong server name?"
    exit 1
  fi

  if tmux list-sessions | grep "^$name:" && [ -z $force ]
  then
    err "Server is already running!"
    exit 1
  fi 

  echo "Setting up environment..."

  mkdir -p $ramdir
    
  cd $minedir
  if [ ! -d $diskdir ]
  then
    mkdir -p $diskdir
  fi
  
  echo "Syncing worldfile to ramdisk..."

  mkdir -p $ramdir/world
  rsync -a $diskdir $ramdir/world/
  
  tmux new-session -d -s $name
  # By default, runserver then exit, so that stop works more smoothly.
  startcommand="./runserver"
  [ -z $persist ] && startcommand="${startcommand}; echo $? > exit_status.log; exit"

  echo -n "Starting server"
  tmux send-keys -t $name "$startcommand" Enter
  i=0
  while ! startup_done; do
      if [ $i == $ellipsis ]; then
          i=0
          echo -n '.'
      fi
      let "i=$i+1"
  done
  echo '.'
  echo 'Done.'
}

function stop {

  function usage {
    err "Usage: mineman stop name"
    exit 1
  }

  name=$1
  if [ -z $name ]
  then
      usage
  fi

  shift
  while [ $# -ge 1 ]; do
    case $1 in
      *)
        usage
        ;;
    esac
    shift
  done

  if ! tmux list-sessions | grep "^$name:"
  then
    err "No tmux session $name"
    exit 1
  fi

  echo -n "Stopping minecraft server"
  tmux send-keys -t $name "stop" Enter
  i=0
  while tmux list-sessions | grep "^$name:"; do
    if [ $i == $ellipsis ]; then
      echo -n '.'
    else
      let "i=$i+1"
  fi
  done
  echo '.'
  echo "Done"
 
}

function store {

  function usage {
    err "Usage: mineman store name [-f] [-r]

Optional flags:

    -f              force storage even if the server is running
    -r              remove server directory when done"
    exit 1
  }

  name=$1
  if [ -z $name ]
  then
    usage
  fi

  shift
  while [ $# -ge 1 ]; do
    case $1 in
      -f)
        force=true
        ;;
      -r)
        remove=true
        ;;
      *)
        usage
        ;;
    esac
    shift
  done

  minedir=$serversdir/$name/
  storedir=$serversdir/stores/
  store=$storedir${name}.tar.bz2

  if [ ! -d $minedir ]
  then
    err "Couldn't find $minedir. Wrong server name?"
    exit 1
  fi

  if tmux list-sessions | grep "^$name:" && [ -z $force ]
  then
    err "Server is running! Please stop it before storing."
    exit 1
  fi 

  server_todisk

  cd $serversdir 
  mkdir -p $storedir 

  tar cvpjf $store $minedir

  if [ $? == 0 ] && [ -z remove ]
  then
    rm -r $minedir
  fi 
}

function unstore {

  function usage {
    err "Usage: mineman unstore name [-r]

Optional flags:

    -r              remove server directory when done"
    exit 1
  }

  name=$1
  if [ -z $name ]
  then
    usage
  fi

  shift
  while [ $# -ge 1 ]; do
    case $1 in
      -r)
        remove=true
        ;;
      *)
        usage
        ;;
    esac
    shift
  done

  minedir=$serversdir/$name/
  storedir=$serversdir/stores/
  store=$storedir${name}.tar.bz2

  if [ ! -f $store ]
  then
    err "Couldn't find $store. Wrong server name?"
    exit 1
  fi

  cd $serversdir 

  tar xvf $store

  if [ $? == 0 ] && [ -z remove ]
  then
    rm $store
  fi 
}

function bootstrap {

  function usage {
    err "Usage: mineman bootstrap name

Optional flags:

    -o player       make player an op (unimplemented)
    -f              force bootstrapping, even if the directory already
                    contains a diskcopy subdirectory. WARNING: this will
                    overwrite the contents of the diskcopy subdirectory,
                    and might do other unexpected things!"
    exit 1
  }

  name=$1
  if [ -z $name ]
  then
    usage
  fi

  shift
  while [ $# -ge 1 ]; do
    case $1 in
      -f)
        force=true
        ;;
      *)
        usage
        ;;
    esac
    shift
  done

  minedir=$serversdir/$name/

  if [ ! -d $minedir ]
  then
      err "Could not find directory ${minedir}.
Please create a directory for the server you want to bootstrap, and
populate it with a server.jar file."
      exit 1
  fi 

  if [ ! -f ${minedir}server.jar ]
  then
      err "Could not find server jarfile ${minedir}server.jar."
      if [ -f ${minedir}*.jar ]
      then
          err "It looks like there's a jarfile in $minedir.
In order to bootstrap the server, you'll have to symlink it (or rename
it) to server.jar."
      fi
      exit 1
  fi

  cd $minedir
  diskdir=$minedir/diskcopy/

  if [ -d $diskdir ] && [ -z $force ]; then
    err "$minedir already contains a diskcopy directory. Aborting."
    err "If you're sure you want to overwrite $name's existing
worldfiles, rerun this command with the -f flag. Note that
this is NOT RECOMMENDED."
    exit 1
  fi

  echo "Setting up server..."

  echo "#!/bin/bash

java -jar -Xmx4G -Xms1G server.jar" > runserver
  chmod 744 runserver
    
  echo "eula=true" > eula.txt
  quickrun

  mkdir -p $diskdir || err "Couldn't create $diskdir" && exit 1

  echo "Syncing world to $diskdir."
  rsync -a $minedir/world/ $diskdir
  if [ $? != 0 ]; then
    err "Could not move ${minedir}world to $diskdir"
    exit 1
  fi 

  if [ -d $minedir/world ]; then
    echo "Removing directory ${minedir}world" 
    rm -rf $minedir/world
  fi

  if [ -L $minedir/world ]; then
    echo "Symlink at ${minedir}world already exists, skipping..."    
  else
    ramdir=/dev/shm/$name/world/
    echo "Creating symlink to ramdisk."
    mkdir -p $ramdir
    ln -s $ramdir
  fi
}

case "$1" in 
  start)
    shift
    start $@
    ;;
  stop)
    shift
    stop $@ 
    ;;
  store)
    shift
    store $@
    ;;
  unstore)
    shift
    unstore $@ 
    ;;
  bootstrap)
    shift
    bootstrap $@ 
    ;;
  *)
    usage  
    ;;
esac
